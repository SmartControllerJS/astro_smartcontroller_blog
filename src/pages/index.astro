---
import Layout from '../layouts/Layout.astro';
import Subheading from '../components/Subheading.astro';

const title = "SmartController.js";
---

<Layout title={title}>


  <main>



    <script is:inline src="https://unpkg.com/smartcontroller@3.2.7/dist/smartcontroller.min.js"> </script>

    <script is:inline>
      var pos = 0
      var simplePeer;
      var touchpad;

      window.addEventListener('load', function () {
        simplePeer = new smartcontroller.ScrollSmartController('123456789', firstConnected = true);
        simplePeer.createQrCode('https://smartcontrollerjs.github.io/Controllers/blog_scroll.html', 'qrcode', 150, 150);

        simplePeer.on("connection", function (data) {
          console.log(simplePeer.controllerList)
        })

        simplePeer.on("data", function (data) {
          message = data.data.data;
          if (message.type == "button") {
            document.getElementById(message.button_id).scrollIntoView();
          }
          else if (message.type == "touchpad") {
            touchpad = simplePeer.controllerList[0]

            if (touchpad.isActive) {

              if (touchpad.direction) {
                pos = -25
              }

              else {
                pos = 25
              }

            }

          }
          window.scrollBy(0, pos);
        })


      })

    </script>


    <div class="wrapper">
      <div class="sidebar">
        <h2>SC.org</h2>
        <ul>
          <li><a href="#home">Home</a></li>
          <li><a href="#smartcontroller">SmartController.js</a></li>
          <li><a href="#implemented">Implemented</a></li>
          <li><a href="#experiments">Experiments</a></li>
          <li><a href="#discussion">Discussion</a></li>
          <li><a href="#future">Future Work</a></li>
        </ul>
      </div>
    </div>

    <div class="section-container">

      <section id="home" style="background-color:#fef9ef">
        <h1><span>{title}</span></h1>
        <div class="scan-text">Scan me to begin</div>
        <div class="qrcode" id="qrcode"></div>
        <div style="color:grey" class="qrcode">How does this work? Read on to find out</div>
        <div style="position:absolute; top:40%;">
          <Subheading title="An NPM library by SmartController.org">{title}</Subheading>
        </div>
      </section>

      <hr>

      <section id="smartcontroller">
        <Subheading title="What is SmartController.js">{title}</Subheading>
        <div class="row">
          <div class="column">
            <h3>Overview of Library</h3>
            <p>
              SmartControllerJS is written in JavaScript. It uses the
              PeerJS library to facilitate the peer-to-peer connection,
              and EventEmitter2 to monitor and trigger events. The
              library is bundled with Parcel and published on npm, the
              most popular package managers for javascript libraries
              and widely used by web developers. The two main
              building blocks of the library are the SmartController
              and SmartPhoneController classes. Figure 2 gives the
              general overview of how the two classes work together.
              <br><br>
              The SmartController class is used in the computer
              browser, managing all incoming connections from
              smartphones and handling the data input. The class
              also creates various events such as: new connections;
              incoming data; and closing of channels. The PeerJS
              object instantiates a peer ID to which a listener can
              establish a connection. The SmartController class
              maintains a list of connected smartphones listed by
              peer IDs and creates controller objects that store and
              manage the data of each smartphone. The class is also
              responsible for deleting list entries when a user disconnects. Lastly, the SmartController has a method
              for
              creating and displaying QR codes, using EasyQRCodeJS.
              <br><br>
              SmartPhoneController is a class managing the peer
              connection and message passing on the smartphone
              browser. The smartphone-to-computer connection is
              fully automated and handled upon SmartPhoneController object creation, and all parameters necessary for
              the connection are specified and read from the URL.
              The SmartPhoneController class has a single method to
              send data to the computer browser, which can include
              statistics or any relevant information produced by the
              users’ interaction with the controller. The message
              frequency can be limited by setting a throttle which
              specifies how often messages should be sent during
              an interval, ignoring
            </p>
          </div>
          <div class="column">
            <h3>Connection</h3>
            <p>An integral aspect of SmartControllerJS is the use of
              Web Real-Time Communication or WebRTC. WebRTC
              allows establishing peer-to-peer (P2P) communication
              between browsers without requiring an intermediary
              server or application and allows sharing video, audio,
              and generic data. It only requires a lightweight signalling
              server for the initial set-up by allowing two peers to
              “find each other”. <br><br>
              In the SmartController library, a peer ID identifies
              the computer browser and is passed as an argument to
              the URL of the smartphone controller. For example,
              for the touchpad controller, an application with a
              peer ID of ‘123456789’ should ask the user to open
              https://smartcontrollerjs.github.io/Controllers/touchpad
              .html?id=123456789 on their smartphone. A QR code
              is automatically generated to pass this information to a
              smartphone with minimal friction. <br><br>
              Once a connection between a smartphone and a
              computer is established, the SmartController will store
              this connection in a list before generating and storing the new controller object. As many connections
              can be established and will be listed in order in the
              SmartController instance. Sometimes you will need
              to be able to identify specific users. An argument,
              called playerid, can be passed to the controller URL
              to uniquely identify a user. Following our example
              above, a player called JohnDoe, could be identified as
              https://smartcontrollerjs.github.io/Controllers/touchpad
              .html?id=123456789playerid=JohnDoe. <br><br>
              This is helpful for multiplayers games where we need
              3
              FIG. 2. Flow chart of basic steps to establish the peer-to-peer connection and send data.
              to ensure a user is assigned a specific role. We include an
              optional parameter, called firstConnected, to limit connection for a player ID to the first person
              connecting, as
              shown in Figure 2. This is useful to ensure a user does
              not get kicked out of a session in mid-play. If there is
              a player ID specified and firstConnected is true, SmartController will check if an ID is already stored in
              the
              connection list. If yes, no further connections to that ID
              will be allowed. If firstConnected is set to false, every
              new connection to the same player ID will overwrite the
              original one.</p>
          </div>
          <div class="column">
            <h3>Controllers</h3>
            <p>The foundation of each controller type is a BaseController class, which is responsible for processing
              data
              for individual smartphones. As this is the most basic,
              default version of a controller object, it only stores a
              peer ID, a player ID (if specified), and statistic fields
              for ping and message rate. For simplicity, each new
              controller is created by extending this class and adding
              new fields to expand the functionality. <br><br>
              In the smartphone browser, controllers only need
              to use the SmartPhoneController class to manage
              connection and send data to the user. The community
              has already created a range of controllers hosted on
              GitHub that can be reused in their browser application.
              Current controllers include a NES controller, a joystick,
              a touchpad and an accelerometer. <br><br>
              Each controller has a corresponding class that extends
              BaseController and provides additional fields and methods specific to the controller. For example, the
              TouchPad class adds a boolean isActive state that is True when
              the player is interacting with the phone screen and False
              otherwise, and the NesController class stores a button
              dictionary containing the states of all buttons.
            </p>
          </div>
        </div>
      </section>

      <hr>

      <section id="implemented">
        <Subheading title="Demos">{title}</Subheading>
        <iframe class="iframe-style" style="position: relative; margin:auto;"
          src="https://fraser-dempster.github.io/l4-project-interactive-game/" width="90%" height="720vh">
        </iframe>
      </section>

      <hr>

      <section id="experiments">
        <Subheading title="Experiments + results">{title}</Subheading>
        <iframe class="coinchaser" style="position: relative; margin: auto; top:3vh"
          src="https://smartcontrollerjs.github.io/Coin-Chaser/" width="90%" height="540vh"></iframe>
      </section>

      <hr>

      <section id="discussion">
        <Subheading title="Discussion + trends">{title}</Subheading>
      </section>

      <hr>

      <section id="future" style="background-color:antiquewhite">
        <Subheading title="Future Work">{title}</Subheading>
      </section>

    </div>


  </main>
</Layout>

<style>
  * {
    list-style: none;
    text-decoration: none;
    margin: 0;
    padding: 0;
  }

  :root {
    --astro-gradient: linear-gradient(0deg, #4F39FA, #DA62C4);
  }

  .wrapper {
    position: relative;
    word-wrap: break-word;
  }

  .wrapper .sidebar {
    position: fixed;
    width: 10%;
    height: 100%;
    background: #4b4276;
    z-index: 1;
    padding: 30px 0;
  }

  .wrapper .sidebar h2 {
    color: #fff;
    text-transform: uppercase;
    text-align: center;
    margin-bottom: 30px;
  }

  .wrapper .sidebar ul li {
    padding: 15px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    border-top: 1px solid rgba(225, 225, 225, 0.05);
  }

  .wrapper .sidebar ul li a {
    color: #bdb8d7;
    display: block;
  }

  .wrapper .sidebar ul li:hover {}

  .wrapper .sidebar ul li:hover {
    background: #594f8d;
  }

  .wrapper .sidebar ul li:hover a {
    color: #fff;
  }

  h1 {
    margin: 2rem 0;
    font-size: 6vw;
    text-align: right;
    height: fit-content;
    position: absolute;
    top: 30%;
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    right: 6%;
  }

  .qrcode {
    right: 30%;
    position: relative;
    margin: 0;
    font-size: 1vw;
    /* width: 150;
    height: 150; */
  }

  .scan-text {
    font-family: monospace;
    right: 30%;
    margin-top: 13%;
    position: relative;
    font-size: 2vw;
  }

  main {
    margin: auto;
    /* padding: 1em; */
    overflow-x: hidden;
  }

  section {
    position: relative;
    font-family: sans-serif;
    min-height: 100vh;
    max-width: 90%;
    left: 10%;
    display: flex;
    flex-direction: column;
    /* justify-content: baseline; */
    align-items: center;
    top: 0;
    background-color: #fef9ef
  }

  .sticky {
    position: sticky;
    top: 0;
    text-align: center;
  }

  @media (max-width: 1440px) {
    .iframe-style {
      height: 84vh;
    }

    .coinchaser {
      height: 70vh;
    }
  }

  hr {
    border: 15px solid #4b4276;
    border-radius: 30px;
    width: 50%;
    visibility: hidden;
  }


  .column {
    float: left;
    width: 31%;
    margin-right: 1%;
  }

  .row {
    margin-top: 5%;
    margin-left: 3%;
    margin-right: 1%;
    left: 5%;
  }

  /* Clear floats after the columns */
  .row:after {
    content: "";
    display: table;
    clear: both;

  }
</style>